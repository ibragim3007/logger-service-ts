{"version":3,"file":"index.esm.js","sources":["../src/logger.ts"],"sourcesContent":["export type LogFunctionParametersType<TOptions = any, TMessage = any> = (\n  message: TMessage,\n  options?: TOptions\n) => void;\n\nexport interface LoggerStrategy<TOptions = any, TMessage = any> {\n  log: LogFunctionParametersType<TOptions, TMessage>;\n  error: LogFunctionParametersType<TOptions, TMessage>;\n  success: LogFunctionParametersType<TOptions, TMessage>;\n}\n\nexport class Logger<TOptions> implements LoggerStrategy<TOptions> {\n  private strategies: LoggerStrategy<TOptions>[] = [];\n\n  constructor(strategies: LoggerStrategy<TOptions>[]) {\n    this.strategies = strategies;\n  }\n\n  private callFields = <TData>(\n    key: keyof LoggerStrategy,\n    message: TData,\n    options?: TOptions\n  ) => {\n    this.strategies.forEach((strategy) => {\n      strategy[key](message, options);\n    });\n  };\n\n  log: LogFunctionParametersType<TOptions> = <TMessage>(\n    message: TMessage,\n    options?: TOptions\n  ) => {\n    this.callFields(\"log\", message, options);\n  };\n\n  error: LogFunctionParametersType<TOptions> = <TError>(\n    e: TError,\n    options?: TOptions\n  ) => {\n    this.callFields(\"error\", e, options);\n  };\n\n  success<TMessage>(message: TMessage, options?: TOptions) {\n    this.callFields(\"success\", message, options);\n  }\n}\n"],"names":["Logger","strategies","_this","callFields","key","message","options","forEach","strategy","this","log","error","e","prototype","success"],"mappings":"AAWa,IAAAA,eAAM,WAGjB,SAAAA,EAAYC,GAAsCC,IAAAA,EAF1CD,KAAAA,KAAAA,WAAyC,GAMzCE,KAAAA,WAAa,SACnBC,EACAC,EACAC,GAEAJ,EAAKD,WAAWM,QAAQ,SAACC,GACvBA,EAASJ,GAAKC,EAASC,EACzB,EACF,EAACG,KAEDC,IAA2C,SACzCL,EACAC,GAEAJ,EAAKC,WAAW,MAAOE,EAASC,EAClC,EAACG,KAEDE,MAA6C,SAC3CC,EACAN,GAEAJ,EAAKC,WAAW,QAASS,EAAGN,EAC9B,EAzBEG,KAAKR,WAAaA,CACpB,CA4BC,OA5BAD,EAAAa,UA0BDC,QAAA,SAAkBT,EAAmBC,GACnCG,KAAKN,WAAW,UAAWE,EAASC,EACtC,EAACN,CAAA,CAjCgB"}