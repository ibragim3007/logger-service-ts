{"code":"export class Logger {\r\n    strategies = [];\r\n    constructor(strategies) {\r\n        this.strategies = strategies;\r\n    }\r\n    callFields = (key, message, options) => {\r\n        this.strategies.forEach((strategy) => {\r\n            strategy[key](message, options);\r\n        });\r\n    };\r\n    log = (message, options) => {\r\n        this.callFields(\"log\", message, options);\r\n    };\r\n    error = (e, options) => {\r\n        this.callFields(\"error\", e, options);\r\n    };\r\n    success(message, options) {\r\n        this.callFields(\"success\", message, options);\r\n    }\r\n}\r\n//# sourceMappingURL=logger.js.map","references":[],"map":"{\"version\":3,\"file\":\"logger.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/logger.ts\"],\"names\":[],\"mappings\":\"AAWA,MAAM,OAAO,MAAM;IACT,UAAU,GAA+B,EAAE,CAAC;IAEpD,YAAY,UAAsC;QAChD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEO,UAAU,GAAG,CACnB,GAAyB,EACzB,OAAc,EACd,OAAkB,EAClB,EAAE;QACF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,GAAG,GAAwC,CACzC,OAAiB,EACjB,OAAkB,EAClB,EAAE;QACF,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,KAAK,GAAwC,CAC3C,CAAS,EACT,OAAkB,EAClB,EAAE;QACF,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF,OAAO,CAAW,OAAiB,EAAE,OAAkB;QACrD,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF\"}","dts":{"name":"/Users/ibragim/Documents/GitHub/logger-service-ts/dist/logger.d.ts","writeByteOrderMark":false,"text":"export type LogFunctionParametersType<TOptions = any, TMessage = any> = (message: TMessage, options?: TOptions) => void;\r\nexport interface LoggerStrategy<TOptions = any, TMessage = any> {\r\n    log: LogFunctionParametersType<TOptions, TMessage>;\r\n    error: LogFunctionParametersType<TOptions, TMessage>;\r\n    success: LogFunctionParametersType<TOptions, TMessage>;\r\n}\r\nexport declare class Logger<TOptions> implements LoggerStrategy<TOptions> {\r\n    private strategies;\r\n    constructor(strategies: LoggerStrategy<TOptions>[]);\r\n    private callFields;\r\n    log: LogFunctionParametersType<TOptions>;\r\n    error: LogFunctionParametersType<TOptions>;\r\n    success<TMessage>(message: TMessage, options?: TOptions): void;\r\n}\r\n"}}
